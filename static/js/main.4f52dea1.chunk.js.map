{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["io","require","localStream","localVideo","document","getElementById","remoteVideo","streamConstraints","audio","video","App","handleLoginClick","a","fetch","method","headers","body","JSON","stringify","state","login","password","loginRequest","json","loginResponseJson","setState","user","data","socket","reconnect","transports","on","hubStatus","emit","ars","asset_id","asset","id","account_id","account","arsSent","parseDate","parse","console","log","type","dest_asset_id","parseInt","origin_asset_id","callId","video_call_id","origin_asset_priority","priority","origin_asset_type_name","user_role","name","origin_asset_name","answer","cleanVideoStreams","closeVideo","navigator","mediaDevices","getUserMedia","then","stream","srcObject","calculateIceServers","rtcPeerConnection","RTCPeerConnection","onicecandidate","onIceCandidate","ontrack","onAddStream","addTrack","getTracks","createOffer","sessionDescription","isCaller","setLocalDescription","sdp","catch","e","err","setRemoteDescription","RTCSessionDescription","createAnswer","candidate","RTCIceCandidate","sdpMLineIndex","label","addIceCandidate","stunUrl","urls","turnUrl","username","turnUsername","credential","turnCredential","event","streams","sdpMid","handleChangeLogin","target","value","handleChangePassword","handleChangeDestAssetId","handleChangeStunUrl","handleChangeTurnUrl","handleChangeTurnUsername","handleChangeTurnCredential","handleClickEvent","close","this","className","placeholder","onChange","style","margin","width","onClick","Fragment","disabled","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4f52dea1.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './App.css';\n\nconst io = require(\"socket.io-client\");\n\nlet localStream = null;\nlet remoteStream = null;\n\n// const iceServer = {\n//   'iceServer': [\n//       // { 'urls': 'stun:stun.services.mozilla.com' }, // public\n//       // { 'urls': 'stun:stun.l.google.com:19302' } // public\n//       // { 'urls': 'dev.linx.safemobile.com:19302' },\n//       // {\n//       //   urls: 'turn:dev.linx.safemobile.com:19302',\n//       //   username: \"safemobile\",\n//       //   credential: \"Safemobile123\"\n//       // }\n//       // , \n//       {\n//         urls: 'turn:numb.viagenie.ca',\n//         username: \"webrtc@live.com\",\n//         credential: \"muazkh\"\n//       }\n//   ]\n// }\n\nlet localVideo = document.getElementById(\"localVideo\");\nlet remoteVideo = document.getElementById(\"remoteVideo\");\n\nconst streamConstraints = {\n  audio: false,\n  video: true\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      login: '',\n      password: '',\n      user: null,\n      hubStatus: 0, // 0 uninitialized | 1 connecting | 2 connected | 3 connection error\n      socket: null,\n      arsSent: false,\n      dest_asset_id: '',\n      isCaller: false,\n      callId: null,\n      rtcPeerConnection: null,\n      stunUrl: 'dev.linx.safemobile.com:19302',\n      turnUrl: 'turn:dev.linx.safemobile.com:19302',\n      turnUsername: 'safemobile',\n      turnCredential: 'Safemobile123'\n    };\n  }\n\n  componentDidMount() {\n\n  }\n\n\n  handleLoginClick = async () => {\n    const loginRequest = await fetch('https://dev.linx.safemobile.com/api/login', {\n      // const loginRequest = await fetch('http://localhost:41418/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"login\": this.state.login,\n        \"password\": this.state.password\n      })\n    });\n    const loginResponseJson = await loginRequest.json();\n    this.setState({ user: loginResponseJson.data }, () => {\n      // Connect to HUB\n      // this.setState({ socket: io(\"localhost:41414\", {reconnect:true, transports: ['websocket']}) }, () => {\n      this.setState({ socket: io(\"https://hub.dev.linx.safemobile.com/\", {reconnect:true, transports: ['websocket']}) }, () => {\n        const socket = this.state.socket;\n        socket.on('connect', () => {\n          this.setState({ hubStatus: 2 })\n          // Send ARS after connected to HUB\n          socket.emit('ars', JSON.stringify({\n            ars: true,\n            asset_id: this.state.user.asset.id,\n            account_id: this.state.user.account.id\n          }));\n          this.setState({ arsSent: true });\n        });\n\n        // HUB 'video' event handler\n        socket.on('video', (data) => {\n          const parseDate = JSON.parse(data);\n          console.log('video', parseDate);\n\n          // The response to the 'notify-request' (hardcoded 'YES')\n          if(parseDate.type === 'notify-request') {\n            this.setState({ dest_asset_id: parseInt(parseDate.origin_asset_id), callId: parseInt(parseDate.video_call_id) });\n            socket.emit('video', JSON.stringify({\n              origin_asset_id: this.state.user.asset.id,\n              dest_asset_id: parseInt(parseDate.origin_asset_id),\n              type: 'notify-answer',\n              origin_asset_priority: this.state.user.asset.priority,\n              origin_asset_type_name: this.state.user.user_role.name,\n              origin_asset_name: this.state.user.name,\n              video_call_id: parseDate.video_call_id,\n              answer: 'accepted' // answer: 'rejected'\n            }));\n          }\n\n          // Handler for 'notify-end'(when the video closed)\n          if(parseDate.type === 'notify-end') {\n            console.log('notify-end');\n            this.cleanVideoStreams();\n          }\n\n          // Handler for 'notify-answer'\n          if(parseDate.type === 'notify-answer') {\n\n            if(parseDate.answer === 'rejected') {\n              this.closeVideo()\n              return\n            }\n\n            // Create media stream\n            navigator.mediaDevices.getUserMedia(streamConstraints).then(stream => {\n              console.log('Created getUserMedia', stream);\n              localStream = stream;\n              localVideo.srcObject = stream;\n              console.log('iceServers', this.calculateIceServers())\n              // Create SDP\n              this.setState({ rtcPeerConnection: new RTCPeerConnection(this.calculateIceServers()) }, () => {\n                this.state.rtcPeerConnection.onicecandidate = this.onIceCandidate;\n                this.state.rtcPeerConnection.ontrack = this.onAddStream;\n                this.state.rtcPeerConnection.addTrack(localStream.getTracks()[0], localStream); // video\n                // rtcPeerConnection.addTrack(localStream.getTracks()[1], localStream) // audio\n                // Create a offer\n                this.state.rtcPeerConnection.createOffer().then(sessionDescription => {\n                  // Save SDP in state and send it to destination asset_id as offer\n                  this.setState({ isCaller: true, callId: parseInt(parseDate.video_call_id) }, () => {\n                    this.state.rtcPeerConnection.setLocalDescription(sessionDescription);\n                    console.log('Created SDP', sessionDescription);\n                    socket.emit('video', JSON.stringify({\n                      origin_asset_id: this.state.user.asset.id,\n                      type: 'offer',\n                      sdp: sessionDescription,\n                      dest_asset_id: parseInt(this.state.dest_asset_id),\n                      video_call_id: parseDate.video_call_id\n                    }));\n                  })\n                })\n                .catch(e => { console.log(e); })\n              })\n            })\n            .catch(err => {\n                console.log('An error occured', err);\n            })\n          }\n\n          // Handler for 'offer'\n          if(parseDate.type === 'offer') {\n            // When we are NOT the caller\n            if(!this.state.isCaller) {\n              // Create media stream\n              navigator.mediaDevices.getUserMedia(streamConstraints).then(stream => {\n                console.log('Created getUserMedia', stream);\n                localStream = stream;\n                localVideo.srcObject = stream;\n                console.log('iceServers', this.calculateIceServers())\n                // Create SDP\n                this.setState({ rtcPeerConnection: new RTCPeerConnection(this.calculateIceServers()) }, () => {\n                  this.state.rtcPeerConnection.onicecandidate = this.onIceCandidate;\n                  this.state.rtcPeerConnection.ontrack = this.onAddStream;\n                  this.state.rtcPeerConnection.addTrack(localStream.getTracks()[0], localStream); // video\n                  // rtcPeerConnection.addTrack(localStream.getTracks()[1], localStream) // audio\n                  // Set setRemoteDescription to be sender SDP\n                  this.state.rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(parseDate.sdp));\n                  // Create an answer\n                  this.state.rtcPeerConnection.createAnswer().then(sessionDescription => {\n                    // Save SDP in state and send it to destination asset_id as offer\n                    this.setState({ sdp: sessionDescription }, () => {\n                      this.state.rtcPeerConnection.setLocalDescription(sessionDescription);\n                      console.log('Created SDP', sessionDescription);\n                      socket.emit('video', JSON.stringify({\n                        origin_asset_id: this.state.user.asset.id,\n                        type: 'offer',\n                        sdp: sessionDescription,\n                        dest_asset_id: parseInt(this.state.dest_asset_id),\n                        video_call_id: parseDate.video_call_id\n                      }));\n                    })\n                  })\n                  .catch(e => { console.log(e); })\n                })\n              })\n            } else {\n              // When we ARE the caller\n              console.log('parseDate.sdp', parseDate.sdp);\n              this.state.rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(parseDate.sdp));\n            }\n          }\n          \n          if(parseDate.type === 'candidate') {\n            if(this.state.rtcPeerConnection) {\n              const candidate = new RTCIceCandidate({\n                sdpMLineIndex: parseDate.label,\n                candidate: parseDate.candidate\n              });\n              this.state.rtcPeerConnection.addIceCandidate(candidate);\n            }\n          }\n\n        });\n\n      });\n    })\n  }\n\n  calculateIceServers = () => {\n    return {\n      'iceServer': [\n        { \n          'urls': this.state.stunUrl\n        }, {\n          urls: this.state.turnUrl,\n          username: this.state.turnUsername,\n          credential: this.state.turnCredential\n        }\n      ]\n    }\n  }\n\n  onAddStream = (event) => {\n      console.log('onAddStream', event);\n      remoteVideo.srcObject = event.streams[0];\n      remoteStream = event.streams[0];\n  }\n\n  onIceCandidate = (event) => {\n    if(event.candidate) {\n        console.log('sending ice candidate', event.candidate);\n        this.state.socket.emit('video', JSON.stringify({\n            type: 'candidate',\n            label: event.candidate.sdpMLineIndex,\n            id: event.candidate.sdpMid,\n            candidate: event.candidate.candidate,\n            dest_asset_id: this.state.dest_asset_id\n        }));\n      }\n  }\n\n  handleChangeLogin = (e) => {\n    this.setState({ login: e.target.value});\n  }\n\n  handleChangePassword = (e) => {\n    this.setState({ password: e.target.value});\n  }\n\n  handleChangeDestAssetId = (e) => {\n    this.setState({ dest_asset_id: e.target.value});\n  }\n\n  handleChangeStunUrl = (e) => {\n    this.setState({ stunUrl: e.target.value});\n  }\n  \n  handleChangeTurnUrl = (e) => {\n    this.setState({ turnUrl: e.target.value});\n  }\n\n  handleChangeTurnUsername = (e) => {\n    this.setState({ turnUsername: e.target.value});\n  }\n\n  handleChangeTurnCredential = (e) => {\n    this.setState({ turnCredential: e.target.value});\n  }\n\n  handleClickEvent = () => {\n    this.state.socket.emit('video', JSON.stringify({\n      origin_asset_id: this.state.user.asset.id,\n      dest_asset_id: parseInt(this.state.dest_asset_id),\n      type: 'notify-request', \n      origin_asset_priority: this.state.user.asset.priority,\n      origin_asset_type_name: this.state.user.user_role.name,\n      origin_asset_name: this.state.user.name,\n      video_call_id: null\n    }));\n  }\n\n  closeVideo = () => {\n    this.state.socket.emit('video', JSON.stringify({\n      origin_asset_id: this.state.user.asset.id,\n      dest_asset_id: parseInt(this.state.dest_asset_id),\n      type: 'notify-end', \n      video_call_id: this.state.callId\n    }));\n    this.cleanVideoStreams();\n  }\n\n  cleanVideoStreams = () => {\n    this.state.rtcPeerConnection != null && this.state.rtcPeerConnection.close();\n    this.setState({  callId: null, rtcPeerConnection: null });\n    localVideo.srcObject = null;\n    remoteVideo.srcObject = null;\n  }\n\n  render() {\n    const { login, password, user, hubStatus, arsSent, dest_asset_id, isCaller, callId, stunUrl, turnUrl, turnUsername, turnCredential } = { ...this.state };\n    return (\n      <div className=\"App\">\n\n        <h1>HUB TESTER</h1>\n\n        <br></br>\n\n        <h2><u>STUN and TURN servers</u></h2>\n        \n        STUN Server URL :\n        <input\n          placeholder='ex:    stun:stun.services.mozilla.com'\n          onChange={this.handleChangeStunUrl}\n          value={stunUrl}\n          style={{ margin: 10, width: 250 }}\n        /><br></br>\n\n        TURN Server URL :\n        <input\n          placeholder='ex:    turn:numb.viagenie.ca'\n          onChange={this.handleChangeTurnUrl}\n          value={turnUrl}\n          style={{ margin: 10, width: 250 }}\n        /><br></br>\n        \n        TURN Server Username :\n        <input\n          placeholder='ex:    gigel'\n          onChange={this.handleChangeTurnUsername}\n          value={turnUsername}\n          style={{ margin: 10, width: 250 }}\n        /><br></br>\n\n        TURN Server Credential :\n        <input\n          placeholder='ex:    superGiGi'\n          onChange={this.handleChangeTurnCredential}\n          value={turnCredential}\n          style={{ margin: 10, width: 250 }}\n        />\n\n        <br></br><br></br>\n\n        <h2><u>Login</u></h2>\n\n        Username :\n        <input\n          placeholder='user'\n          onChange={this.handleChangeLogin}\n          value={login}\n          style={{ margin: 10, width: 250 }}\n        /><br></br>\n\n        Password :\n        <input\n          placeholder='password'\n          onChange={this.handleChangePassword}\n          value={password}\n          style={{ margin: 10, width: 250 }}\n        /><br></br>\n\n        <button onClick={this.handleLoginClick} style={{ margin: 10, width: 100 }}>LOGIN</button>\n\n        <br></br>\n\n        <h2><u>isCaller:</u> {isCaller ? 'TRUE' : 'FALSE'}</h2>\n        <h2><u>User details:</u></h2>\n        {\n          user && (\n            <React.Fragment>\n              <h4>account_id: {user.account.id}</h4>\n              <h4>user_id: {user.id}</h4>\n              <h4>asset_id: {user.asset.id}</h4>\n              <h4>user_role: {user.user_role.name}</h4>\n            </React.Fragment>\n          )\n        }\n\n        <h2><u>HUB</u></h2>\n\n        <h4>status: {(hubStatus === 0 ? 'uninitialized' : hubStatus === 1 ? 'connecting' : hubStatus === 2 ? 'connected' : 'connection error' )}</h4>\n        <h4>ARS Sent: {arsSent === true ? 'TRUE' : 'FALSE'}</h4>\n        <h4>Call id: {callId}</h4>\n\n        <br></br>\n\n        <input\n          placeholder='destination_asset_id'\n          onChange={this.handleChangeDestAssetId}\n          value={dest_asset_id}\n        />\n\n        <button onClick={this.handleClickEvent} disabled={dest_asset_id.length === 0 ? true : false}>Send `video` notify-request</button>\n\n        <br></br>\n\n        <button onClick={this.closeVideo} style={{ margin: 40}} disabled={callId !== null ? false : true}>Close Video</button>\n\n      </div>\n    );\n  };\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}